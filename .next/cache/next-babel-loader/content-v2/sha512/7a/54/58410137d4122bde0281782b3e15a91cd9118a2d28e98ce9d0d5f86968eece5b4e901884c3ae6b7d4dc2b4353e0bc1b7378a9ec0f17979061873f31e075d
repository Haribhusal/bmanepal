{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { INVESTOR_SIGNUP } from \"../actions/types\";\nconst initialState = {\n  investor: null,\n  signupsuccess: null\n};\nexport default function investorSignup(state = initialState, action) {\n  var _action$payload;\n\n  switch (action.type) {\n    case INVESTOR_SIGNUP:\n      return _objectSpread(_objectSpread(_objectSpread({}, state), action.payload), {}, {\n        investor: (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.data,\n        signupsuccess: true\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/whiteshadow/projects/benchmark-advisors/reducers/investor.js"],"names":["INVESTOR_SIGNUP","initialState","investor","signupsuccess","investorSignup","state","action","type","payload","data"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,kBAAhC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,IADS;AAEnBC,EAAAA,aAAa,EAAE;AAFI,CAArB;AAKA,eAAe,SAASC,cAAT,CAAwBC,KAAK,GAAGJ,YAAhC,EAA8CK,MAA9C,EAAsD;AAAA;;AACnE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,eAAL;AACE,2DACKK,KADL,GAEKC,MAAM,CAACE,OAFZ;AAGEN,QAAAA,QAAQ,qBAAEI,MAAM,CAACE,OAAT,oDAAE,gBAAgBC,IAH5B;AAIEN,QAAAA,aAAa,EAAE;AAJjB;;AAMF;AACE,aAAOE,KAAP;AATJ;AAWD","sourcesContent":["import { INVESTOR_SIGNUP } from \"../actions/types\";\n\nconst initialState = {\n  investor: null,\n  signupsuccess: null,\n};\n\nexport default function investorSignup(state = initialState, action) {\n  switch (action.type) {\n    case INVESTOR_SIGNUP:\n      return {\n        ...state,\n        ...action.payload,\n        investor: action.payload?.data,\n        signupsuccess: true,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}